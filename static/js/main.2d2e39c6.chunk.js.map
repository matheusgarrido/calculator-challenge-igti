{"version":3,"sources":["components/button.js","components/display.js","containers/calculator.js","index.js"],"names":["Button","text","type","getButtonClick","className","onClick","Display","value","Calculator","useState","display","setDisplay","isResult","setIsResult","setValue","previousValue","setPreviousValue","currentOperation","setCurrentOperation","calculate","parseFloat","root","Math","pow","exp","onClickSignal","newInput","newInputType","a","currentValue","previous","newValue","splittedSize","split","length","substr","useEffect","id","ReactDOM","render","StrictMode","document","querySelector"],"mappings":"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","file":"static/js/main.2d2e39c6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Button({ text, type, getButtonClick }) {\r\n  function handleClick() {\r\n    // const newInput = event.target.textContent;\r\n    getButtonClick(text, type);\r\n  }\r\n  return (\r\n    <div className={type} onClick={handleClick}>\r\n      {text}\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function Display({ value }) {\r\n  return (\r\n    <main>\r\n      <label>{value || '0'}</label>\r\n    </main>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport Button from '../components/button';\r\nimport Display from '../components/display';\r\nimport '../style/style.css';\r\n\r\nexport default function Calculator() {\r\n  const [display, setDisplay] = useState('0');\r\n  const [isResult, setIsResult] = useState(false);\r\n  const [value, setValue] = useState('0');\r\n  const [previousValue, setPreviousValue] = useState('0');\r\n  const [currentOperation, setCurrentOperation] = useState('');\r\n\r\n  useEffect(() => {\r\n    setDisplay(value);\r\n  }, [value]);\r\n\r\n  function calculate(previousValue, value) {\r\n    previousValue = parseFloat(previousValue);\r\n    value = parseFloat(value);\r\n    switch (currentOperation) {\r\n      case '+':\r\n        if (!previousValue) previousValue = 0;\r\n        let sum = previousValue + value;\r\n        setDisplay(sum + '');\r\n        break;\r\n      case '-':\r\n        let sub = previousValue - value;\r\n        setDisplay(sub + '');\r\n        break;\r\n      case '÷':\r\n        if (value === 0) {\r\n          setDisplay('0');\r\n          break;\r\n        }\r\n        let div = previousValue / value;\r\n        setDisplay(div + '');\r\n        break;\r\n      case 'x':\r\n        let mult = previousValue * value;\r\n        setDisplay(mult + '');\r\n        break;\r\n      case '√a':\r\n        let root = Math.pow(previousValue, 1 / value);\r\n        setDisplay(root + '');\r\n        break;\r\n      case 'a²':\r\n        let exp = Math.pow(previousValue, value);\r\n        setDisplay(exp + '');\r\n        break;\r\n    }\r\n    setIsResult(true);\r\n  }\r\n\r\n  function onClickSignal(previousValue, newInput, value) {\r\n    previousValue = parseFloat(previousValue);\r\n    value = parseFloat(value);\r\n    switch (newInput) {\r\n      case '=':\r\n        if (currentOperation) {\r\n          calculate(previousValue, value);\r\n          setPreviousValue(value + '');\r\n          setCurrentOperation('');\r\n        } else {\r\n          setValue(value + '');\r\n        }\r\n        break;\r\n      default: {\r\n        setCurrentOperation(newInput);\r\n        if (previousValue) {\r\n          calculate(previousValue, value);\r\n        } else {\r\n          setPreviousValue(value + '');\r\n          setValue('0');\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  async function getButtonClick(newInput, newInputType) {\r\n    let currentValue = value;\r\n    let previous = previousValue;\r\n    if (isResult) {\r\n      previous = display;\r\n      currentValue = '0';\r\n      setPreviousValue(display);\r\n      setValue('0');\r\n      setDisplay('0');\r\n      setIsResult(false);\r\n    }\r\n    let newValue = '0';\r\n    switch (newInputType) {\r\n      case 'signal':\r\n        if (newInput == '%') {\r\n          onClickSignal(previous, '=', parseFloat(currentValue) / 100 + '');\r\n        } else {\r\n          if (currentValue === '0') setValue('-');\r\n          else onClickSignal(previous, newInput, currentValue);\r\n        }\r\n        break;\r\n      //Comma\r\n      case 'comma':\r\n        const splittedSize = currentValue.split(newInput).length;\r\n        if (splittedSize === 1) newValue = currentValue + newInput;\r\n        else newValue = currentValue;\r\n        setValue(newValue);\r\n        break;\r\n      //Number\r\n      case 'number':\r\n        //Limit to 20 chars in display\r\n        if (currentValue.length < 20) {\r\n          //If is empty ignore zeros\r\n          if ((currentValue === '0' || currentValue === '-0') && newInput === 0)\r\n            break;\r\n          //If starts with zero\r\n          else if (\r\n            currentValue[0] === '0' ||\r\n            currentValue.substr(0, 2) === '-0'\r\n          ) {\r\n            //And has comma\r\n            if (currentValue.split('.').length === 1) newValue = newInput + '';\r\n            //And doesn't have comma\r\n            else newValue = currentValue + '' + newInput;\r\n          }\r\n          //If not start with zero\r\n          else newValue = currentValue + '' + newInput;\r\n          setValue(newValue);\r\n        }\r\n        break;\r\n      default:\r\n        setValue(newValue);\r\n        setPreviousValue(newValue);\r\n        setCurrentOperation('');\r\n    }\r\n  }\r\n  return (\r\n    <div id=\"calculator\">\r\n      <Display value={display} />\r\n      <section>\r\n        <Button text={'√a'} type={'signal'} getButtonClick={getButtonClick} />\r\n        <Button text={'a²'} type={'signal'} getButtonClick={getButtonClick} />\r\n        <Button text={'%'} type={'signal'} getButtonClick={getButtonClick} />\r\n        <Button text={'÷'} type={'signal'} getButtonClick={getButtonClick} />\r\n        <Button text={7} type={'number'} getButtonClick={getButtonClick} />\r\n        <Button text={8} type={'number'} getButtonClick={getButtonClick} />\r\n        <Button text={9} type={'number'} getButtonClick={getButtonClick} />\r\n        <Button text={'x'} type={'signal'} getButtonClick={getButtonClick} />\r\n        <Button text={4} type={'number'} getButtonClick={getButtonClick} />\r\n        <Button text={5} type={'number'} getButtonClick={getButtonClick} />\r\n        <Button text={6} type={'number'} getButtonClick={getButtonClick} />\r\n        <Button text={'-'} type={'signal'} getButtonClick={getButtonClick} />\r\n        <Button text={1} type={'number'} getButtonClick={getButtonClick} />\r\n        <Button text={2} type={'number'} getButtonClick={getButtonClick} />\r\n        <Button text={3} type={'number'} getButtonClick={getButtonClick} />\r\n        <Button text={'+'} type={'signal'} getButtonClick={getButtonClick} />\r\n        <Button text={'C'} type={'clean'} getButtonClick={getButtonClick} />\r\n        <Button text={0} type={'number'} getButtonClick={getButtonClick} />\r\n        <Button text={'.'} type={'comma'} getButtonClick={getButtonClick} />\r\n        <Button text={'='} type={'signal'} getButtonClick={getButtonClick} />\r\n      </section>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Calculator from './containers/calculator';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <div />\r\n    <Calculator />\r\n    <div />\r\n  </React.StrictMode>,\r\n  document.querySelector('body')\r\n);\r\n"],"sourceRoot":""}