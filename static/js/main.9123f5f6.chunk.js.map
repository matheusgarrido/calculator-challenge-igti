{"version":3,"sources":["components/button.js","components/display.js","containers/calculator.js","index.js"],"names":["Button","text","type","getButtonClick","title","className","onClick","Display","value","document","querySelector","select","execCommand","alert","err","console","log","autoFocus","onKeyDown","event","key","isFinite","parseInt","toLowerCase","onBlur","target","focus","Calculator","useState","display","setDisplay","isResult","setIsResult","setValue","previousValue","setPreviousValue","currentOperation","setCurrentOperation","calculate","parseFloat","root","Math","pow","exp","onClickSignal","newInput","newInputType","a","currentValue","previous","newValue","splittedSize","split","length","substr","useEffect","id","ReactDOM","render","StrictMode"],"mappings":"wNAEe,SAASA,EAAT,GAAwD,IAAtCC,EAAqC,EAArCA,KAAMC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,eAAgBC,EAAS,EAATA,MAK3D,OACE,qBAAKC,UAAWH,EAAMI,QALxB,WAEEH,EAAeF,EAAMC,IAGuBE,MAAOA,EAAnD,SACGH,ICPQ,SAASM,EAAT,GAA6C,IAA1BC,EAAyB,EAAzBA,MAAOL,EAAkB,EAAlBA,eACvC,OACE,sBAAMG,QA4ER,WACE,IACsBG,SAASC,cAAc,SAC/BC,SACZF,SAASG,YAAY,QACrBC,MAAM,SAAD,OAAUL,EAAV,YACL,MAAOM,GACPC,QAAQC,IAAIF,KAnFoBV,MAAO,gBAAzC,SACE,uBACEI,MAAOA,GAAS,EAChBS,WAAS,EACTC,UAON,SAAqBC,GAAQ,IACnBC,EAAQD,EAARC,IACR,GAAIC,SAASC,SAASF,IAAOjB,EAAeiB,EAAK,eAE/C,OAAQA,EAAIG,eAEV,IAAK,IACL,IAAK,IACHpB,EAAe,IAAK,SACpB,MAEF,IAAK,IACL,IAAK,QACL,IAAK,IACHA,EAAe,IAAK,UACpB,MAEF,IAAK,IACL,IAAK,IACHA,EAAe,IAAK,UACpB,MAEF,IAAK,IACL,IAAK,IACHA,EAAe,IAAK,UACpB,MAEF,IAAK,IACL,IAAK,IACHA,EAAe,IAAK,UACpB,MAEF,IAAK,IACL,IAAK,IACHA,EAAe,OAAK,UACpB,MAEF,IAAK,IACL,IAAK,IACHA,EAAe,UAAM,UACrB,MAEF,IAAK,IACL,IAAK,IACHA,EAAe,QAAM,UACrB,MAEF,IAAK,IACL,IAAK,IACHA,EAAe,IAAK,UACpB,MAEF,IAAK,YACL,IAAK,SACL,IAAK,SACL,IAAK,IACHA,EAAe,IAAK,WA9DtBqB,OAmEN,SAAqBL,GACnBA,EAAMM,OAAOC,a,MCxEF,SAASC,IAAc,IAAD,EACLC,mBAAS,KADJ,mBAC5BC,EAD4B,KACnBC,EADmB,OAEHF,oBAAS,GAFN,mBAE5BG,EAF4B,KAElBC,EAFkB,OAGTJ,mBAAS,KAHA,mBAG5BpB,EAH4B,KAGrByB,EAHqB,OAIOL,mBAAS,KAJhB,mBAI5BM,EAJ4B,KAIbC,EAJa,OAKaP,mBAAS,IALtB,mBAK5BQ,EAL4B,KAKVC,EALU,KAWnC,SAASC,EAAUJ,EAAe1B,GAGhC,OAFA0B,EAAgBK,WAAWL,GAC3B1B,EAAQ+B,WAAW/B,GACX4B,GACN,IAAK,IACEF,IAAeA,EAAgB,GAEpCJ,EADUI,EAAgB1B,EACT,IACjB,MACF,IAAK,IAEHsB,EADUI,EAAgB1B,EACT,IACjB,MACF,IAAK,OACH,GAAc,IAAVA,EAAa,CACfsB,EAAW,KACX,MAGFA,EADUI,EAAgB1B,EACT,IACjB,MACF,IAAK,IAEHsB,EADWI,EAAgB1B,EACT,IAClB,MACF,IAAK,UACH,IAAIgC,EAAOC,KAAKC,IAAIR,EAAe,EAAI1B,GACvCsB,EAAWU,EAAO,IAClB,MACF,IAAK,QACH,IAAIG,EAAMF,KAAKC,IAAIR,EAAe1B,GAClCsB,EAAWa,EAAM,IAGrBX,GAAY,GAGd,SAASY,EAAcV,EAAeW,EAAUrC,GAG9C,OAFA0B,EAAgBK,WAAWL,GAC3B1B,EAAQ+B,WAAW/B,GACXqC,GACN,IAAK,IACCT,GACFE,EAAUJ,EAAe1B,GACzB2B,EAAiB3B,EAAQ,IACzB6B,EAAoB,KAEpBJ,EAASzB,EAAQ,IAEnB,MACF,QACE6B,EAAoBQ,GAChBX,EACFI,EAAUJ,EAAe1B,IAEzB2B,EAAiB3B,EAAQ,IACzByB,EAAS,OAnEkB,SAyEpB9B,EAzEoB,gFAyEnC,WAA8B0C,EAAUC,GAAxC,qBAAAC,EAAA,sDACMC,EAAexC,EACfyC,EAAWf,EACXH,IACFkB,EAAWpB,EACXmB,EAAe,IACfb,EAAiBN,GACjBI,EAAS,KACTH,EAAW,KACXE,GAAY,IAEVkB,EAAW,IAXjB,KAYUJ,EAZV,OAaS,WAbT,OAsBS,UAtBT,OA6BS,WA7BT,8BAcsB,KAAZD,EACFD,EAAcK,EAAU,IAAKV,WAAWS,GAAgB,IAAM,IAEzC,MAAjBA,EAAsBf,EAAS,KAC9BW,EAAcK,EAAUJ,EAAUG,GAlB/C,mCAuBYG,EAAeH,EAAaI,MAAMP,GAAUQ,OAGlDpB,EAFwBiB,EAAH,IAAjBC,EAA+BH,EAAeH,EAClCG,GAzBtB,kCA+BUA,EAAaK,OAAS,IA/BhC,oBAiC8B,MAAjBL,GAAyC,OAAjBA,GAAuC,IAAbH,EAjC/D,qDAyCoDK,GAJtB,MAApBF,EAAa,IACiB,OAA9BA,EAAaM,OAAO,EAAG,KAGgB,IAAnCN,EAAaI,MAAM,KAAKC,OAAyBR,EAAW,GAKlDG,EAAe,GAAKH,EA9C5C,QA+CQZ,EAASiB,GA/CjB,4CAmDMjB,EAASiB,GACTf,EAAiBe,GACjBb,EAAoB,IArD1B,6CAzEmC,sBAiInC,OA1HAkB,qBAAU,WACRzB,EAAWtB,KACV,CAACA,IAyHF,sBAAKgD,GAAG,aAAR,UACE,cAACjD,EAAD,CAASC,MAAOqB,EAAS1B,eAAgBA,IACzC,oCACE,cAACH,EAAD,CACEC,KAAM,UACNC,KAAM,SACNC,eAAgBA,EAChBC,MAAO,yCAET,cAACJ,EAAD,CACEC,KAAM,QACNC,KAAM,SACNC,eAAgBA,EAChBC,MAAO,oDAET,cAACJ,EAAD,CACEC,KAAM,IACNC,KAAM,SACNC,eAAgBA,EAChBC,MAAO,+CAET,cAACJ,EAAD,CACEC,KAAM,OACNC,KAAM,SACNC,eAAgBA,EAChBC,MAAO,6CAET,cAACJ,EAAD,CACEC,KAAM,EACNC,KAAM,SACNC,eAAgBA,EAChBC,MAAO,kCAET,cAACJ,EAAD,CACEC,KAAM,EACNC,KAAM,SACNC,eAAgBA,EAChBC,MAAO,kCAET,cAACJ,EAAD,CACEC,KAAM,EACNC,KAAM,SACNC,eAAgBA,EAChBC,MAAO,kCAET,cAACJ,EAAD,CACEC,KAAM,IACNC,KAAM,SACNC,eAAgBA,EAChBC,MAAO,mDAET,cAACJ,EAAD,CACEC,KAAM,EACNC,KAAM,SACNC,eAAgBA,EAChBC,MAAO,kCAET,cAACJ,EAAD,CACEC,KAAM,EACNC,KAAM,SACNC,eAAgBA,EAChBC,MAAO,kCAET,cAACJ,EAAD,CACEC,KAAM,EACNC,KAAM,SACNC,eAAgBA,EAChBC,MAAO,kCAET,cAACJ,EAAD,CACEC,KAAM,IACNC,KAAM,SACNC,eAAgBA,EAChBC,MACE,0EAGJ,cAACJ,EAAD,CACEC,KAAM,EACNC,KAAM,SACNC,eAAgBA,EAChBC,MAAO,kCAET,cAACJ,EAAD,CACEC,KAAM,EACNC,KAAM,SACNC,eAAgBA,EAChBC,MAAO,kCAET,cAACJ,EAAD,CACEC,KAAM,EACNC,KAAM,SACNC,eAAgBA,EAChBC,MAAO,kCAET,cAACJ,EAAD,CACEC,KAAM,IACNC,KAAM,SACNC,eAAgBA,EAChBC,MAAO,6CAET,cAACJ,EAAD,CACEC,KAAM,IACNC,KAAM,QACNC,eAAgBA,EAChBC,MAAO,6DAET,cAACJ,EAAD,CACEC,KAAM,EACNC,KAAM,SACNC,eAAgBA,EAChBC,MAAO,kCAET,cAACJ,EAAD,CACEC,KAAM,IACNC,KAAM,QACNC,eAAgBA,EAChBC,MAAO,0CAET,cAACJ,EAAD,CACEC,KAAM,IACNC,KAAM,SACNC,eAAgBA,EAChBC,MAAO,sDC9PjBqD,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,wBACA,cAAChC,EAAD,IACA,2BAEFlB,SAASC,cAAc,W","file":"static/js/main.9123f5f6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Button({ text, type, getButtonClick, title }) {\r\n  function handleClick() {\r\n    // const newInput = event.target.textContent;\r\n    getButtonClick(text, type);\r\n  }\r\n  return (\r\n    <div className={type} onClick={handleClick} title={title}>\r\n      {text}\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function Display({ value, getButtonClick }) {\r\n  return (\r\n    <main onClick={handleClickToCopy} title={'Click to copy'}>\r\n      <input\r\n        value={value || 0}\r\n        autoFocus\r\n        onKeyDown={handleInput}\r\n        onBlur={handleFocus}\r\n      />\r\n    </main>\r\n  );\r\n\r\n  //When key down\r\n  function handleInput(event) {\r\n    const { key } = event;\r\n    if (isFinite(parseInt(key))) getButtonClick(key, 'number');\r\n    else\r\n      switch (key.toLowerCase()) {\r\n        //To comma/dot\r\n        case ',':\r\n        case '.':\r\n          getButtonClick('.', 'comma');\r\n          break;\r\n        //To calculate\r\n        case '=':\r\n        case 'enter':\r\n        case ' ':\r\n          getButtonClick('=', 'signal');\r\n          break;\r\n        //To add\r\n        case 'a':\r\n        case '+':\r\n          getButtonClick('+', 'signal');\r\n          break;\r\n        //To subtrat\r\n        case 's':\r\n        case '-':\r\n          getButtonClick('-', 'signal');\r\n          break;\r\n        //To multiply\r\n        case 'x':\r\n        case '*':\r\n          getButtonClick('x', 'signal');\r\n          break;\r\n        //To divide\r\n        case 'd':\r\n        case '/':\r\n          getButtonClick('÷', 'signal');\r\n          break;\r\n        //To get root\r\n        case 'r':\r\n        case '#':\r\n          getButtonClick('√a', 'signal');\r\n          break;\r\n        //To get exponentiation\r\n        case 'e':\r\n        case '^':\r\n          getButtonClick('a²', 'signal');\r\n          break;\r\n        //To get percentage\r\n        case 'p':\r\n        case '%':\r\n          getButtonClick('%', 'signal');\r\n          break;\r\n        //To clean\r\n        case 'backspace':\r\n        case 'escape':\r\n        case 'delete':\r\n        case 'c':\r\n          getButtonClick('C', 'clean');\r\n          break;\r\n      }\r\n  }\r\n  //Always focused\r\n  function handleFocus(event) {\r\n    event.target.focus();\r\n  }\r\n\r\n  function handleClickToCopy() {\r\n    try {\r\n      const valueToCopy = document.querySelector('input');\r\n      valueToCopy.select();\r\n      document.execCommand('copy');\r\n      alert(`Value ${value} copied`);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport Button from '../components/button';\r\nimport Display from '../components/display';\r\nimport '../style/style.css';\r\n\r\nexport default function Calculator() {\r\n  const [display, setDisplay] = useState('0');\r\n  const [isResult, setIsResult] = useState(false);\r\n  const [value, setValue] = useState('0');\r\n  const [previousValue, setPreviousValue] = useState('0');\r\n  const [currentOperation, setCurrentOperation] = useState('');\r\n\r\n  useEffect(() => {\r\n    setDisplay(value);\r\n  }, [value]);\r\n\r\n  function calculate(previousValue, value) {\r\n    previousValue = parseFloat(previousValue);\r\n    value = parseFloat(value);\r\n    switch (currentOperation) {\r\n      case '+':\r\n        if (!previousValue) previousValue = 0;\r\n        let sum = previousValue + value;\r\n        setDisplay(sum + '');\r\n        break;\r\n      case '-':\r\n        let sub = previousValue - value;\r\n        setDisplay(sub + '');\r\n        break;\r\n      case '÷':\r\n        if (value === 0) {\r\n          setDisplay('0');\r\n          break;\r\n        }\r\n        let div = previousValue / value;\r\n        setDisplay(div + '');\r\n        break;\r\n      case 'x':\r\n        let mult = previousValue * value;\r\n        setDisplay(mult + '');\r\n        break;\r\n      case '√a':\r\n        let root = Math.pow(previousValue, 1 / value);\r\n        setDisplay(root + '');\r\n        break;\r\n      case 'a²':\r\n        let exp = Math.pow(previousValue, value);\r\n        setDisplay(exp + '');\r\n        break;\r\n    }\r\n    setIsResult(true);\r\n  }\r\n\r\n  function onClickSignal(previousValue, newInput, value) {\r\n    previousValue = parseFloat(previousValue);\r\n    value = parseFloat(value);\r\n    switch (newInput) {\r\n      case '=':\r\n        if (currentOperation) {\r\n          calculate(previousValue, value);\r\n          setPreviousValue(value + '');\r\n          setCurrentOperation('');\r\n        } else {\r\n          setValue(value + '');\r\n        }\r\n        break;\r\n      default: {\r\n        setCurrentOperation(newInput);\r\n        if (previousValue) {\r\n          calculate(previousValue, value);\r\n        } else {\r\n          setPreviousValue(value + '');\r\n          setValue('0');\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  async function getButtonClick(newInput, newInputType) {\r\n    let currentValue = value;\r\n    let previous = previousValue;\r\n    if (isResult) {\r\n      previous = display;\r\n      currentValue = '0';\r\n      setPreviousValue(display);\r\n      setValue('0');\r\n      setDisplay('0');\r\n      setIsResult(false);\r\n    }\r\n    let newValue = '0';\r\n    switch (newInputType) {\r\n      case 'signal':\r\n        if (newInput == '%') {\r\n          onClickSignal(previous, '=', parseFloat(currentValue) / 100 + '');\r\n        } else {\r\n          if (currentValue === '0') setValue('-');\r\n          else onClickSignal(previous, newInput, currentValue);\r\n        }\r\n        break;\r\n      //Comma\r\n      case 'comma':\r\n        const splittedSize = currentValue.split(newInput).length;\r\n        if (splittedSize === 1) newValue = currentValue + newInput;\r\n        else newValue = currentValue;\r\n        setValue(newValue);\r\n        break;\r\n      //Number\r\n      case 'number':\r\n        //Limit to 20 chars in display\r\n        if (currentValue.length < 20) {\r\n          //If is empty ignore zeros\r\n          if ((currentValue === '0' || currentValue === '-0') && newInput === 0)\r\n            break;\r\n          //If starts with zero\r\n          else if (\r\n            currentValue[0] === '0' ||\r\n            currentValue.substr(0, 2) === '-0'\r\n          ) {\r\n            //And has comma\r\n            if (currentValue.split('.').length === 1) newValue = newInput + '';\r\n            //And doesn't have comma\r\n            else newValue = currentValue + '' + newInput;\r\n          }\r\n          //If not start with zero\r\n          else newValue = currentValue + '' + newInput;\r\n          setValue(newValue);\r\n        }\r\n        break;\r\n      default:\r\n        setValue(newValue);\r\n        setPreviousValue(newValue);\r\n        setCurrentOperation('');\r\n    }\r\n  }\r\n  return (\r\n    <div id=\"calculator\">\r\n      <Display value={display} getButtonClick={getButtonClick} />\r\n      <section>\r\n        <Button\r\n          text={'√a'}\r\n          type={'signal'}\r\n          getButtonClick={getButtonClick}\r\n          title={'Press \"#\" or \"r\" to calculate a root'}\r\n        />\r\n        <Button\r\n          text={'a²'}\r\n          type={'signal'}\r\n          getButtonClick={getButtonClick}\r\n          title={'Press \"^\" or \"e\" to calculate an exponentiation'}\r\n        />\r\n        <Button\r\n          text={'%'}\r\n          type={'signal'}\r\n          getButtonClick={getButtonClick}\r\n          title={'Press \"%\" or \"p\" to calculate a percentage'}\r\n        />\r\n        <Button\r\n          text={'÷'}\r\n          type={'signal'}\r\n          getButtonClick={getButtonClick}\r\n          title={'Press \"/\" or \"d\" to calculate a division'}\r\n        />\r\n        <Button\r\n          text={7}\r\n          type={'number'}\r\n          getButtonClick={getButtonClick}\r\n          title={'Press \"7\" to input the number'}\r\n        />\r\n        <Button\r\n          text={8}\r\n          type={'number'}\r\n          getButtonClick={getButtonClick}\r\n          title={'Press \"8\" to input the number'}\r\n        />\r\n        <Button\r\n          text={9}\r\n          type={'number'}\r\n          getButtonClick={getButtonClick}\r\n          title={'Press \"9\" to input the number'}\r\n        />\r\n        <Button\r\n          text={'x'}\r\n          type={'signal'}\r\n          getButtonClick={getButtonClick}\r\n          title={'Press \"*\" or \"x\" to calculate a multiplication'}\r\n        />\r\n        <Button\r\n          text={4}\r\n          type={'number'}\r\n          getButtonClick={getButtonClick}\r\n          title={'Press \"4\" to input the number'}\r\n        />\r\n        <Button\r\n          text={5}\r\n          type={'number'}\r\n          getButtonClick={getButtonClick}\r\n          title={'Press \"5\" to input the number'}\r\n        />\r\n        <Button\r\n          text={6}\r\n          type={'number'}\r\n          getButtonClick={getButtonClick}\r\n          title={'Press \"6\" to input the number'}\r\n        />\r\n        <Button\r\n          text={'-'}\r\n          type={'signal'}\r\n          getButtonClick={getButtonClick}\r\n          title={\r\n            'Press \"-\" or \"s\" to calculate a subtration or to set a negative value'\r\n          }\r\n        />\r\n        <Button\r\n          text={1}\r\n          type={'number'}\r\n          getButtonClick={getButtonClick}\r\n          title={'Press \"1\" to input the number'}\r\n        />\r\n        <Button\r\n          text={2}\r\n          type={'number'}\r\n          getButtonClick={getButtonClick}\r\n          title={'Press \"2\" to input the number'}\r\n        />\r\n        <Button\r\n          text={3}\r\n          type={'number'}\r\n          getButtonClick={getButtonClick}\r\n          title={'Press \"3\" to input the number'}\r\n        />\r\n        <Button\r\n          text={'+'}\r\n          type={'signal'}\r\n          getButtonClick={getButtonClick}\r\n          title={'Press \"+\" or \"a\" to calculate a addition'}\r\n        />\r\n        <Button\r\n          text={'C'}\r\n          type={'clean'}\r\n          getButtonClick={getButtonClick}\r\n          title={'Press Backspace, Esc, Delete or \"c\" to clean the display'}\r\n        />\r\n        <Button\r\n          text={0}\r\n          type={'number'}\r\n          getButtonClick={getButtonClick}\r\n          title={'Press \"0\" to input the number'}\r\n        />\r\n        <Button\r\n          text={'.'}\r\n          type={'comma'}\r\n          getButtonClick={getButtonClick}\r\n          title={'Press \",\" or \".\" to set a decimal dot'}\r\n        />\r\n        <Button\r\n          text={'='}\r\n          type={'signal'}\r\n          getButtonClick={getButtonClick}\r\n          title={'Press Enter, Space or \"=\" to get the result'}\r\n        />\r\n      </section>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Calculator from './containers/calculator';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <div />\r\n    <Calculator />\r\n    <div />\r\n  </React.StrictMode>,\r\n  document.querySelector('body')\r\n);\r\n"],"sourceRoot":""}